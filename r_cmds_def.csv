s,rcore_t_s,t=stack.pop()
S,rcore_s_t,stack.append(t)
g,rcore_t_g,t=tg
G,rcore_g_t,tg=t
h,rcore_t_h,t=th
H,rcore_h_t,th=t
i,rcore_t_i,t=ti
I,rcore_i_t,ti=t
k,rcore_t_k,t=tk
K,rcore_k_t,tk=t
z,rcore_zte,if(t==0) tk=1; else tk=0
Z,rcore_ztg,if(t>0) tk=1; else tk=0
j,rcore_jnz_r,if(tk!=0) jump to line# (line+t) 
J,rcore_jnz_a,if(tk!=0) jump to line# t
n,rcore_not,tk = NOT tk
o,rcore_or,tk = ti OR tk
N,rcore_and,tk = ti AND tk
O,rcore_xor,tk = ti XOR tk
_,rcore_t_zero,t=0
^,rcore_t_inc,t++
v,rcore_t_dec,t--
<,rcore_t_shl,t=t<<1
>,rcore_t_shr,t=t>>1
|,rcore_t_abs,t=abs(t)
-,rcore_t_flipsign,t=t*-1
+,rmath_t_ti_add,t=t+ti
*,rmath_t_ti_mul,t=t*ti
/,rmath_t_ti_idiv,t=t//ti
%,rmath_t_ti_mod,t=t%ti
p,rmath_t_ti_pow,t=floor(pow(t,ti))
l,rmath_t_ti_log,t=floor(log(t,ti))
u,rxtra_t_uptime_s,t=floor(time.monotonic())
U,rxtra_t_uptime_ns,t=time.monotonic_ns()%1000000000
R,rxtra_t_randseed,random.seed(t)
r,rxtra_t_randint,t=random.randint(0,t-1)
x,rxtio_t_in_char,t=sys.stdin.read(1)
X,rxtio_t_in_int,inputs an integer and stores it to t
y,rxtio_t_out_char,sys.stdout.write(t)
Y,rxtio_t_out_int,outputs t in int form
